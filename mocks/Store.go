// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	Model "example/userproject/pkg/userData/Models"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *Store) CreateUser(user Model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(Model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *Store) DeleteUser(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields:
func (_m *Store) GetAllUsers() (error, []Model.User) {
	ret := _m.Called()

	var r0 error
	var r1 []Model.User
	if rf, ok := ret.Get(0).(func() (error, []Model.User)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func() []Model.User); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]Model.User)
		}
	}

	return r0, r1
}

// GetOneUser provides a mock function with given fields: id
func (_m *Store) GetOneUser(id int) (error, Model.User) {
	ret := _m.Called(id)

	var r0 error
	var r1 Model.User
	if rf, ok := ret.Get(0).(func(int) (error, Model.User)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(int) Model.User); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(Model.User)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: initialUser, updatedUser
func (_m *Store) UpdateUser(initialUser Model.User, updatedUser Model.User) error {
	ret := _m.Called(initialUser, updatedUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(Model.User, Model.User) error); ok {
		r0 = rf(initialUser, updatedUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
