// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	Model "example/userproject/pkg/userData/Models"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *Service) CreateUser(user Model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(Model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: user, id
func (_m *Service) DeleteUser(user *Model.User, id string) error {
	ret := _m.Called(user, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Model.User, string) error); ok {
		r0 = rf(user, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: users
func (_m *Service) GetAllUsers(users *[]Model.User) error {
	ret := _m.Called(users)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]Model.User) error); ok {
		r0 = rf(users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOneUser provides a mock function with given fields: user, id
func (_m *Service) GetOneUser(user *Model.User, id string) (error, Model.User) {
	ret := _m.Called(user, id)

	var r0 error
	var r1 Model.User
	if rf, ok := ret.Get(0).(func(*Model.User, string) (error, Model.User)); ok {
		return rf(user, id)
	}
	if rf, ok := ret.Get(0).(func(*Model.User, string) error); ok {
		r0 = rf(user, id)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(*Model.User, string) Model.User); ok {
		r1 = rf(user, id)
	} else {
		r1 = ret.Get(1).(Model.User)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user, id
func (_m *Service) UpdateUser(user *Model.User, id string) error {
	ret := _m.Called(user, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*Model.User, string) error); ok {
		r0 = rf(user, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
